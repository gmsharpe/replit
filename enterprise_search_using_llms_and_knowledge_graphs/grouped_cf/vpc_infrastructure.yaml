AWSTemplateFormatVersion: '2010-09-09'
Description: Codepipeline for Multi Modal Enterprise Search App

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Environment Configuration'
        Parameters:
          - EnvironmentName
          - S3DataPrefixKB
      - Label:
          default: 'Container Configuration'
        Parameters:
          - Cpu
          - Memory
          - ContainerPort
      - Label:
          default: 'Autoscaling'
        Parameters:
          - DesiredTaskCount
          - MinContainers
          - MaxContainers
          - AutoScalingTargetValue
      - Label:
          default: 'Cognito Configuration'
        Parameters:
          - CognitoUserPoolId
          - CognitoAppClientId
      - Label:
          default: 'VPCConfig'
        Parameters:
          - Vpccidr
          - PublicSubnetAcidr
          - PublicSubnetBcidr
          - PrivateSubnetAcidr
          - PrivateSubnetBcidr
      # duplicate of above
      - Label:
          default: 'EnvironmentConfig'
        Parameters:
          - EnvironmentName

Mappings:
  # Cloudfront Mappings
  ELBRegionMap:
    'us-east-1':
      ELBAccountId: '127311923021'
    'us-west-2':
      ELBAccountId: '797873946194'

Parameters:
  ContainerPort:
    Description: Port for Docker host and container
    Type: Number
    Default: 80

  Cpu:
    Description: "CPU of Fargate Task. Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
    Type: Number
    Default: 512
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096

  Memory:
    Description: "Memory of Fargate Task.  Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
    Type: Number
    Default: 1024
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
      - 16384
      - 30720

  EnvironmentName:
    Description: Unique name to distinguish different web application in the same AWS account (min length 1 and max length 4)
    Type: String
    MinLength: 1
    MaxLength: 4
    Default: dev

  DesiredTaskCount:
    Description: Desired Docker task count
    Type: Number
    Default: 1

  MinContainers:
    Description: Minimum containers for Autoscaling. Should be less than or equal to DesiredTaskCount
    Type: Number
    Default: 1

  MaxContainers:
    Description: Maximum containers for Autoscaling. Should be greater than or equal to DesiredTaskCount
    Type: Number
    Default: 3

  AutoScalingTargetValue:
    Description: CPU Utilization Target
    Type: Number
    Default: 80

  S3DataPrefixKB:
    Default: knowledge_base
    Type: String
    Description: S3 object prefix where the knowledge base source documents should be stored

  CognitoUserPoolId:
    Description: 'Cognito User Pool Id.Must be a valid Cognito User Pool ID. For example: us-east-1_abcdefgh'
    Type: String
    AllowedPattern: '^[\w-]+_[0-9a-zA-Z]+$'
    ConstraintDescription: 'Must be a valid Cognito User Pool ID. For example: us-east-1_abcdefgh'
    MinLength: 1
    MaxLength: 55

  CognitoAppClientId:
    Description: 'Cognito Application Client Id.Must be valid consisting of lowercase letters and numbers'
    Type: String
    AllowedPattern: '^[0-9a-z]{26}$'
    ConstraintDescription: 'Must be a valid Cognito App Client ID consisting of lowercase letters and numbers'
    MinLength: 1
    MaxLength: 128

  # VPC specific
  Vpccidr:
    Description: Please enter the IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24


Resources:

############################
#### Nested VPC Stack #####
##########################

# VPC Infrastructure - Stack to create basic app infrastructure
#Infrastructure:
#  DependsOn: MultiModalBuildCustomResource
#  Type: AWS::CloudFormation::Stack
#  Properties:
#    TemplateURL: !Sub https://s3.amazonaws.com/${MultiModalCodeS3Bucket}/cloudformation/infrastructure.yaml
#    Parameters:
#      EnvironmentName: !Ref EnvironmentName

  # ECS Cluster
  MultiModalCluster:
    Type: AWS::ECS::Cluster
    DependsOn: MultiModalECSRoleCustomResource
    Properties:
      ClusterName: !Join ['-', ['MultiModalCluster', !Ref EnvironmentName]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Logs Policy
  LogsPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      ManagedPolicyName: !Sub "LogsPolicy${EnvironmentName}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:PutRetentionPolicy'
            Resource: '*'

  # Logging bucket
  LoggingBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccount}:root
                - {ElbAccount: !FindInMap [ELBRegionMap, !Ref 'AWS::Region', ELBAccountId]}
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/alb/logs/AWSLogs/${AWS::AccountId}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # VPC
  VPC:
    DeletionPolicy: Retain
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'VPC'

  VPCLogGroup:
    DeletionPolicy: Retain
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  VPCLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn

  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogGroupName: !Ref VPCLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCLogRole.Arn

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create a Subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetB

  PrivateSubnetA:
    DeletionPolicy: Retain
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    DeletionPolicy: Retain
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  # NAT Gateway
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Private Route Table
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableA

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  # VPC Endpoint Security Group
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: VPC Endpoint Security Group
      GroupDescription: Group allowing traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPC Endpoint Security Group

  # Custom ECS resource
  MultiModalECSRoleCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['ECSRole', !Sub '${AWS::StackName}']]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
      Policies:
        - PolicyName: IAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateServiceLinkedRole
                  - iam:AttachRolePolicy
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:DetachNetworkInterface
                Resource:
                  - "*"

  MultiModalECSRoleCustomResourceFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join ['-', ['ECSCF', !Sub '${AWS::StackName}']]
      Handler: index.handler
      Role: !GetAtt MultiModalECSRoleCustomResourceRole.Arn
      Timeout: 300
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import cfnresponse
          iam_client = boto3.client('iam')
          
          def handler(event, context):
          
              try:
                request_type = event['RequestType']
                print(request_type)
          
                if request_type == 'Create':
                  desired_ecs_role_name = "AWSServiceRoleForECS"
                  desired_ecs_scaling_role_name = "AWSServiceRoleForApplicationAutoScaling_ECSService"
          
                  try:
                    iam_client.get_role(RoleName=desired_ecs_role_name)
                    ecs_role_exists = True
                  except ClientError as e:
                    if e.response['Error']['Code'] == 'NoSuchEntity':
                      ecs_role_exists = False
                    else:
                      ecs_role_exists = True
          
                  try:
                    iam_client.get_role(RoleName=desired_ecs_scaling_role_name)
                    ecs_scaling_role_exists = True
                  except ClientError as e:
                    if e.response['Error']['Code'] == 'NoSuchEntity':
                      ecs_scaling_role_exists = False
                    else:
                      ecs_scaling_role_exists = True
          
                  print(f"ECS service role exist? {ecs_role_exists}")
                  if not ecs_role_exists:
                    iam_client.create_service_linked_role(AWSServiceName="ecs.amazonaws.com")
          
                  print(f"ECS scaling service role exist? {ecs_scaling_role_exists}")
                  if not ecs_scaling_role_exists:
                    iam_client.create_service_linked_role(AWSServiceName="ecs.application-autoscaling.amazonaws.com")
                elif request_type == 'Delete':
                    try:
                      vpc_id = event['ResourceProperties']['VpcId']
                      ec2 = boto3.client('ec2')
          
                      # Describe all ENIs in the VPC
                      response = ec2.describe_network_interfaces(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])
          
                      # Delete each ENI
                      for eni in response['NetworkInterfaces']:
                        if not eni['Description'].startswith('AWS created network interface'):
                          try:
                            ec2.delete_network_interface(NetworkInterfaceId=eni['NetworkInterfaceId'])
                            print(f"Deleted ENI: {eni['NetworkInterfaceId']}")
                          except ec2.exceptions.ClientError as e:
                            if e.response['Error']['Code'] == 'InvalidNetworkInterfaceID.NotFound':
                              print(f"ENI {eni['NetworkInterfaceId']} not found, skipping.")
                            else:
                              print(f"Error deleting ENI {eni['NetworkInterfaceId']}: {str(e)}")
          
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                    except Exception as e:
                      print(f"Delete Stack Error: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
          
              except Exception as ex:
                print(ex)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  MultiModalECSRoleCustomResource:
    DependsOn: VPCEndpointSecurityGroup
    Type: Custom::ECSRole
    Properties:
      ServiceToken: !GetAtt MultiModalECSRoleCustomResourceFunction.Arn
      VpcId: !Ref VPC


Outputs:
  VPC:
    Description: "VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "Basic-VPC-${EnvironmentName}"

  LogsPolicy:
    Description: "LogsPolicy"
    Value: !GetAtt LogsPolicy.PolicyArn
    Export:
      Name: !Sub "Basic-LogsPolicy-${EnvironmentName}"

  LoggingBucket:
    Description: "LoggingBucket"
    Value: !Ref LoggingBucket
    Export:
      Name: !Sub "Basic-LoggingBucket-${EnvironmentName}"

  LoggingBucketPolicy:
    Description: "LoggingBucketPolicy"
    Value: !Ref LoggingBucketPolicy
    Export:
      Name: !Sub "Basic-LoggingBucketPolicy-${EnvironmentName}"

  PublicSubnetA:
    Description: "PublicSubnetA"
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "Basic-PublicSubnetA-${EnvironmentName}"

  PublicSubnetB:
    Description: "PublicSubnetB"
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "Basic-PublicSubnetB-${EnvironmentName}"

  PrivateSubnetA:
    Description: "PrivateSubnetA"
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "Basic-PrivateSubnetA-${EnvironmentName}"

  PrivateSubnetB:
    Description: "PrivateSubnetB"
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "Basic-PrivateSubnetB-${EnvironmentName}"

  MultiModalCluster:
    Description: "MultiModalCluster"
    Value: !Ref MultiModalCluster
    Export:
      Name: !Sub "MultiModalCluster-${EnvironmentName}"


# Artifact Bucket
MultiModalArtifactStore:
  Type: AWS::S3::Bucket
  Properties:
    LoggingConfiguration:
      DestinationBucketName: !GetAtt Infrastructure.Outputs.LoggingBucket
      LogFilePrefix: !Sub artifact-${EnvironmentName}-logs

MultiModalArtifactStorePolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref MultiModalArtifactStore
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        -
          Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: '*'
          Action: s3:PutObject
          Resource: !Join [ '', [ !GetAtt MultiModalArtifactStore.Arn, '/*' ] ]
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: aws:kms
        -
          Sid: DenyInsecureConnections
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource:
            - !Sub arn:aws:s3:::${MultiModalArtifactStore}/*
            - !Sub arn:aws:s3:::${MultiModalArtifactStore}
          Condition:
            Bool:
              aws:SecureTransport: false
